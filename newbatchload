#!/usr/bin/env bash

usage() {
    cat <<EOF
usage: ${0##*/} [--help, -*] [-s <simultaneous jobs>] [containers...]
EOF
}
doc() { 
    usage
    echo 
    cat <<EOF
Creates and submits dq2-get jobs to PBS. One job array will be created
for the entire list of files. 

The datasets will be downloaded to your working directory. 

Any additional arguments beginning with a '-' will be passed to dq2-get, 
along with the argument that follows. 

For example: 

>>> batchload -f '*.root*' \$(cat list_of_files.txt) 

will submit one job for all the jobs in 'list_of_files.txt', only 
downloading root files.  

This is supposed to be stupidly easy to use. If you have questions (or 
better yet, suggestions) ask Dan. 

EOF
}

# ________________________________________________________________________
# read in options

script_name=dq2batch.sh
batch_out_dir=batch-output

test_run=false

# number of jobs to ask for simultaneously
n_simultaneous=20
while (( $# )) 
do 
    arg=$1
    case $1 in 
	--help )
	    doc
	    exit 1 ;;
	--test )
	    test_run=true 
	    shift;;
	-h) 
	    doc 
	    exit 1 ;;
	-s)
	    shift
	    n_simultaneous=$1
	    shift;;
	-*)
	    dq2_args+=$1" "
	    shift
	    dq2_args+=$1" "
	    shift;; 
	*)
	    files+=$1" "
	    shift;;
    esac
done
if [[ -z $files ]]
    then 
    if [[ ! -t 0 ]]
    then 
	files=$(cat)
    else
	usage
	echo "no containers, quitting..." 1>&2
	exit 1
    fi
fi

# _________________________________________________________________________
# test and setup dq2

if ! command -v voms-proxy-init > /dev/null
then 
    echo "voms-proxy-init not found (did you setup dq2?), quitting..." 1>&2
    exit 1
fi 
if ! $test_run
then
    voms-proxy-init -voms atlas -out local_cert
fi

if [[ $? != 0 ]] 
then 
    echo 'voms failure, quitting...' 1>&2
    exit 1
fi

# _________________________________________________________________________
# write the script

# header to load all the atlas software
cat >| $script_name <<EOF
# this is automatically generated by ${0##*/}, feel free to edit
# but it's probably smarter to run the generating script again.

shopt -s expand_aliases

export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
alias setupATLAS='source \${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'
setupATLAS --quiet

dq2script=\${ATLAS_LOCAL_ROOT_BASE}/packageSetups/atlasLocalDQ2ClientSetup.sh
alias localSetupDQ2Client='source \${dq2script}'

opts="--skipConfirm --dq2ClientVersion \${dq2ClientVersionVal} --quiet"
localSetupDQ2Client \$opts

echo 'submitted from: ' \$PBS_O_WORKDIR 
cd \$PBS_O_WORKDIR

voms-proxy-init -voms atlas -noregen -q -cert local_cert

EOF

# PBS setup
file_array=( $files )
priority="-p -500"
subjobs="-t 1-${#file_array[*]}%$n_simultaneous"
resources="-l walltime=01:00:00:00,naccesspolicy=shared"

cat >> $script_name <<EOF

#PBS -q hep
#PBS $priority
#PBS $subjobs
#PBS $resources
#PBS -j oe
#PBS -o ${batch_out_dir}/job-\${PBS_JOBID}-\${PBS_ARRAYID}.log

mkdir -p ${batch_out_dir}

EOF

# write in file array
echo "file_array=(" >> $script_name
for f in ${file_array[*]}
do 
    echo $f >> $script_name
done
echo ")" >> $script_name

# add run command
cat >> $script_name <<EOF

# Run dq2 command
(
set -f
dq2-get ${dq2_args} \${file_array[\$PBS_O_WORKDIR-1]}
)

EOF

if ! $test_run 
then 
    qsub $script_name
fi
